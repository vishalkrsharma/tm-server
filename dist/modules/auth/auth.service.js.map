{"version":3,"sources":["../../../src/modules/auth/auth.service.ts"],"sourcesContent":["import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { comparePassword } from 'src/common/password';\nimport { SigninDto } from 'src/modules/auth/dto/signin-dto';\nimport { SignupDto } from 'src/modules/auth/dto/signup-dto';\nimport { UsersService } from 'src/modules/users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  async signup(signupDto: SignupDto) {\n    const { username, email, password } = signupDto;\n\n    const existingUser = await this.usersService.findOne({ email, username });\n\n    if (existingUser) {\n      throw new HttpException(\n        { message: 'User already exists' },\n        HttpStatus.CONFLICT,\n      );\n    }\n\n    const createdUser = await this.usersService.create({\n      username,\n      email,\n      password,\n    });\n\n    const { password: createdUserPassword, ...createdUserWithoutPassword } =\n      createdUser.toObject();\n\n    const token = this.jwtService.sign({ userId: createdUser._id });\n\n    return {\n      message: 'User successfully registered',\n      user: createdUserWithoutPassword,\n      token,\n    };\n  }\n\n  async signin(signinDto: SigninDto) {\n    const { username, email, password } = signinDto;\n\n    const existingUser = await this.usersService.findOne({ email, username });\n\n    const checkPassword = await comparePassword(\n      password,\n      existingUser.password,\n    );\n\n    if (!checkPassword) {\n      throw new HttpException(\n        {\n          message: 'Invalid password',\n        },\n        HttpStatus.FORBIDDEN,\n      );\n    }\n\n    const token = this.jwtService.sign({ email });\n\n    const { password: existingUserPassword, ...existingUserWithoutPassword } =\n      existingUser.toObject();\n\n    return {\n      message: 'User successfully logged in',\n      user: existingUserWithoutPassword,\n      token,\n    };\n  }\n}\n"],"names":["AuthService","signup","signupDto","username","email","password","existingUser","usersService","findOne","HttpException","message","HttpStatus","CONFLICT","createdUser","create","createdUserPassword","createdUserWithoutPassword","toObject","token","jwtService","sign","userId","_id","user","signin","signinDto","checkPassword","comparePassword","FORBIDDEN","existingUserPassword","existingUserWithoutPassword","constructor"],"mappings":";;;;+BASaA;;;eAAAA;;;wBATyC;qBAC3B;0BAEK;8BAGH;;;;;;;;;;AAGtB,IAAA,AAAMA,cAAN,MAAMA;IAMX,MAAMC,OAAOC,SAAoB,EAAE;QACjC,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,EAAE,GAAGH;QAEtC,MAAMI,eAAe,MAAM,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC;YAAEJ;YAAOD;QAAS;QAEvE,IAAIG,cAAc;YAChB,MAAM,IAAIG,qBAAa,CACrB;gBAAEC,SAAS;YAAsB,GACjCC,kBAAU,CAACC,QAAQ;QAEvB;QAEA,MAAMC,cAAc,MAAM,IAAI,CAACN,YAAY,CAACO,MAAM,CAAC;YACjDX;YACAC;YACAC;QACF;QAEA,MAAM,EAAEA,UAAUU,mBAAmB,EAAE,GAAGC,4BAA4B,GACpEH,YAAYI,QAAQ;QAEtB,MAAMC,QAAQ,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC;YAAEC,QAAQR,YAAYS,GAAG;QAAC;QAE7D,OAAO;YACLZ,SAAS;YACTa,MAAMP;YACNE;QACF;IACF;IAEA,MAAMM,OAAOC,SAAoB,EAAE;QACjC,MAAM,EAAEtB,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,EAAE,GAAGoB;QAEtC,MAAMnB,eAAe,MAAM,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC;YAAEJ;YAAOD;QAAS;QAEvE,MAAMuB,gBAAgB,MAAMC,IAAAA,yBAAe,EACzCtB,UACAC,aAAaD,QAAQ;QAGvB,IAAI,CAACqB,eAAe;YAClB,MAAM,IAAIjB,qBAAa,CACrB;gBACEC,SAAS;YACX,GACAC,kBAAU,CAACiB,SAAS;QAExB;QAEA,MAAMV,QAAQ,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC;YAAEhB;QAAM;QAE3C,MAAM,EAAEC,UAAUwB,oBAAoB,EAAE,GAAGC,6BAA6B,GACtExB,aAAaW,QAAQ;QAEvB,OAAO;YACLP,SAAS;YACTa,MAAMO;YACNZ;QACF;IACF;IAhEAa,YACE,AAAQxB,YAA0B,EAClC,AAAQY,UAAsB,CAC9B;aAFQZ,eAAAA;aACAY,aAAAA;IACP;AA8DL"}